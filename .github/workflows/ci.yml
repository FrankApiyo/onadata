name: CI
on:
  - push
  - pull_request
concurrency:
  group: ci-${{ github.workflow }}-${{ github.actor }}-${{ github.sha }}
  cancel-in-progress: true

jobs:
  static-analysis:
    name: Prospector Static Analysis
    runs-on: ubuntu-20.04
    env:
      DJANGO_SETTINGS_MODULE: onadata.settings.github_actions_test
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          architecture: "x64"

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "pip_cache_dir=$(pip cache dir)" >> $GITHUB_ENV

      - name: Cache pip
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ env.pip_cache_dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/base.pip') }}-${{ hashFiles('requirements/dev.pip') }}-${{ hashFiles('requirements/azure.pip') }}

      - name: Install APT requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev software-properties-common ghostscript libxslt1-dev binutils libproj-dev gdal-bin memcached libmemcached-dev libxml2-dev libxslt-dev
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Pip requirements
        run: |
          pip install -U pip
          pip install -r requirements/base.pip
          pip install -r requirements/dev.pip
          pip install -r requirements/azure.pip

      - name: Install linting tools
        run:
          pip install prospector==1.7.7 pylint==2.14.5

      - name: Run Prospector
        run: prospector -X -s veryhigh onadata
  unit-tests:
    name: Django Unit Tests
    runs-on: ubuntu-20.04
    needs: static-analysis
    env:
      DJANGO_SETTINGS_MODULE: onadata.settings.github_actions_test
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - testfolder: "onadata/libs onadata/apps/main onadata/apps/restservice onadata/apps/sms_support onadata/apps/viewer onadata/apps/messaging"
          - testfolder: "onadata/apps/api onadata/apps/logger"
    services:
      postgres:
        image: postgis/postgis:13-3.0
        env:
          POSTGRES_PASSWORD: onadata
          POSTGRES_DB: onadata
          POSTGRES_USER: onadata
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"

      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          architecture: "x64"

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "pip_cache_dir=$(pip cache dir)" >> $GITHUB_ENV

      - name: Cache pip
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ env.pip_cache_dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/base.pip') }}-${{ hashFiles('requirements/dev.pip') }}-${{ hashFiles('requirements/azure.pip') }}

      - name: Install APT requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev software-properties-common ghostscript libxslt1-dev binutils libproj-dev gdal-bin memcached libmemcached-dev libxml2-dev libxslt-dev
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Pip requirements
        run: |
          pip install -U pip
          pip install -r requirements/base.pip
          pip install -r requirements/dev.pip

      - name: Run tests
        run: |
          python manage.py test ${{ matrix.testfolder }} --noinput --timing --settings=onadata.settings.github_actions_test --verbosity=2 --parallel=4
  security-check:
    name: Trivy Security Checks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the branch name
        id: get-branch-name
        if: github.event_name == 'push'
        run: echo "version=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./docker/onadata-uwsgi
          file: ./docker/onadata-uwsgi/Dockerfile
          platforms: linux/amd64
          build-args: |
            release_version=${{ github.head_ref || github.base_ref || env.version }}
          push: false
          tags: |
            onaio/onadata:${{ github.head_ref || github.base_ref || env.version }}
          cache-from: type=registry,ref=onaio/onadata:${{ github.head_ref || github.base_ref || env.version }}
          cache-to: type=inline

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: onaio/onadata:${{ github.head_ref || github.base_ref || env.version }}
          format: sarif
          ignore-unfixed: true
          output: 'trivy-results.sarif'

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy_results.sarif'
